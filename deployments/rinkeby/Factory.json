{
  "address": "0x837c03901EeB58076e2D6e0ef52918113D885FDE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryStorage",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subsidyRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_helper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fees",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bond",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "BondCreation",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FACTORY_STORAGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEES",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HELPER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUBSIDY_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_customTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "createBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principleToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "createBondAndTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "transferBondManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66d4ebda4b1e7f91381869030c445c13ae768ff2f0f34466b8cf84746193408f",
  "receipt": {
    "to": null,
    "from": "0xb10bcC8B508174c761CFB1E7143bFE37c4fBC3a1",
    "contractAddress": "0x837c03901EeB58076e2D6e0ef52918113D885FDE",
    "transactionIndex": 40,
    "gasUsed": "5218803",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa6b725b49f0a2021cfcd13b3d9ad17c1c3f041e92ec272edf0fb9f64fd0b67c0",
    "transactionHash": "0x66d4ebda4b1e7f91381869030c445c13ae768ff2f0f34466b8cf84746193408f",
    "logs": [],
    "blockNumber": 9894462,
    "cumulativeGasUsed": "13374119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc3Ab493d0d06c700d9daF7Ea58aBBe12038ec474",
    "0x3C1789217bd228e1C5d86052AA2dCA5FA3534ABe",
    "0xA1260B541f15514295EE0A6831189dC321cDeC12",
    "0x6eeAEff2A5393F09B9D11b7d6489A3282a9AD28d",
    "0x4ff15c53edA95F407F09C647AF8028BBDaf9E1CB"
  ],
  "solcInputHash": "7abecc991158ab403c5243682d97805e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subsidyRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fees\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"BondCreation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FACTORY_STORAGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HELPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSIDY_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"createBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"createBondAndTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferBondManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBond(address,address,address,address)\":{\"params\":{\"_customTreasury\":\"address\",\"_initialOwner\":\"address\",\"_payoutToken\":\"address\",\"_principleToken\":\"address\"},\"returns\":{\"_bond\":\"address\",\"_treasury\":\"address\"}},\"createBondAndTreasury(address,address,address)\":{\"params\":{\"_initialOwner\":\"address\",\"_payoutToken\":\"address\",\"_principleToken\":\"address\"},\"returns\":{\"_bond\":\"address\",\"_treasury\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBond(address,address,address,address)\":{\"notice\":\"deploys custom treasury and custom bond contracts and returns address of both\"},\"createBondAndTreasury(address,address,address)\":{\"notice\":\"deploys custom treasury and custom bond contracts and returns address of both\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bonding/Factory.sol\":\"Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/bonding/CustomBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../types/BondOwnable.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IHelper.sol\\\";\\nimport \\\"./Fees.sol\\\";\\n\\ncontract CustomBond is BondOwnable {\\n    using FixedPoint for *;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event BondCreated(uint256 deposit, uint256 payout, uint256 expires);\\n\\n    event BondRedeemed(address recipient, uint256 payout, uint256 remaining);\\n\\n    event BondPriceChanged(uint256 internalPrice, uint256 debtRatio);\\n\\n    event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment, bool addition);\\n\\n    event LPAdded(address lpAddress, uint256 lpAmount);\\n\\n    IERC20 public immutable PAYOUT_TOKEN; // token paid for principal\\n    ITreasury public immutable CUSTOM_TREASURY; // pays for and receives principal\\n    address public immutable SUBSIDY_ROUTER; // pays subsidy in TAO to custom treasury\\n    address public immutable HELPER; // helper for helping swap, lend to get lp token\\n    address public immutable FEES; // Fees contract\\n    address public OLY_TREASURY; // receives fee\\n    address public principalToken; // inflow token\\n    uint256 public totalPrincipalBonded;\\n    uint256 public totalPayoutGiven;\\n    uint256 public totalDebt; // total value of outstanding bonds; used for pricing\\n    uint256 public lastDecay; // reference block for debt decay\\n    uint256 public payoutSinceLastSubsidy; // principal accrued since subsidy paid\\n    uint256 public maxFeeAllowed = 50000; //maximum amount of fee allowed to charged - 5%\\n    Terms public terms; // stores terms for new bonds\\n    Adjust public adjustment; // stores adjustment to BCV data\\n    bool public lpTokenAsFeeFlag;//\\n    bool public bondWithOneAssetFlag;\\n\\n    mapping(address => Bond) public bondInfo; // stores bond information for depositors\\n\\n    // Info for creating new bonds\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 vestingTerm; // in blocks\\n        uint256 minimumPrice; // vs principal value\\n        uint256 maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\n        uint256 maxDebt; // payout token decimal debt ratio, max % total supply created as debt\\n    }\\n\\n    // Info for bond holder\\n    struct Bond {\\n        uint256 payout; // payout token remaining to be paid\\n        uint256 vesting; // Blocks left to vest\\n        uint256 lastBlock; // Last interaction\\n        uint256 truePricePaid; // Price paid (principal tokens per payout token) in ten-millionths - 4000000 = 0.4\\n    }\\n\\n    // Info for incremental adjustments to control variable\\n    struct Adjust {\\n        bool add; // addition or subtraction\\n        uint256 rate; // increment\\n        uint256 target; // BCV when adjustment finished\\n        uint256 buffer; // minimum length (in blocks) between adjustments\\n        uint256 lastBlock; // block when last adjustment made\\n    }\\n\\n    receive() external payable {}\\n\\n    constructor(\\n        address _customTreasury,\\n        address _payoutToken,\\n        address _principalToken,\\n        address _olyTreasury,\\n        address _subsidyRouter,\\n        address _initialOwner,\\n        address _helper,\\n        address _fees\\n    ) {\\n        require(_customTreasury != address(0), \\\"Factory: customTreasury bad\\\");\\n        CUSTOM_TREASURY = ITreasury(_customTreasury);\\n        require(_payoutToken != address(0), \\\"Factory: payoutToken bad\\\");\\n        PAYOUT_TOKEN = IERC20(_payoutToken);\\n        require(_principalToken != address(0), \\\"Factory: principalToken bad\\\");\\n        principalToken = _principalToken;\\n        require(_olyTreasury != address(0), \\\"Factory: olyTreasury bad\\\");\\n        OLY_TREASURY = _olyTreasury;\\n        require(_subsidyRouter != address(0), \\\"Factory: subsidyRouter bad\\\");\\n        SUBSIDY_ROUTER = _subsidyRouter;\\n        require(_initialOwner != address(0), \\\"Factory: initialOwner bad\\\");\\n        policy = _initialOwner;\\n        bondManager = _initialOwner;\\n        require(_helper != address(0), \\\"Factory: helper bad\\\");\\n        HELPER = _helper;\\n        require(_fees != address(0), \\\"Factory: FEES bad\\\");\\n        FEES = _fees;\\n\\n        lpTokenAsFeeFlag = true;\\n    }\\n\\n    /* ======== INITIALIZATION ======== */\\n\\n    /**\\n     *  @notice initializes bond parameters\\n     *  @param _controlVariable uint\\n     *  @param _vestingTerm uint\\n     *  @param _minimumPrice uint\\n     *  @param _maxPayout uint\\n     *  @param _maxDebt uint\\n     *  @param _initialDebt uint\\n     */\\n    function initializeBond(\\n        uint256 _controlVariable,\\n        uint256 _vestingTerm,\\n        uint256 _minimumPrice,\\n        uint256 _maxPayout,\\n        uint256 _maxDebt,\\n        uint256 _initialDebt\\n    ) external onlyPolicy {\\n\\n        require(terms.controlVariable == 0 && _controlVariable > 0, \\\"initializeBond: controlVariable must be 0\\\");\\n\\n        require(_vestingTerm >= 10000, \\\"Vesting must be longer than 36 hours\\\");\\n\\n        require(_maxPayout <= 1000, \\\"Payout cannot be above 1 percent\\\");\\n\\n        terms = Terms({\\n            controlVariable: _controlVariable,\\n            vestingTerm: _vestingTerm,\\n            minimumPrice: _minimumPrice,\\n            maxPayout: _maxPayout,\\n            maxDebt: _maxDebt\\n        });\\n\\n        totalDebt = _initialDebt;\\n        lastDecay = block.number;\\n        CUSTOM_TREASURY.toggleBondContract(address(this));\\n    }\\n\\n    /// @notice set fee flag\\n    /// @param _lpTokenAsFeeFlag bool\\n    function setLPtokenAsFee(bool _lpTokenAsFeeFlag) external onlyPolicy {\\n        lpTokenAsFeeFlag = _lpTokenAsFeeFlag;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    enum PARAMETER {\\n        VESTING,\\n        PAYOUT,\\n        DEBT\\n    }\\n\\n    /**\\n     *  @notice set parameters for new bonds\\n     *  @param _parameter PARAMETER\\n     *  @param _input uint\\n     */\\n    function setBondTerms(PARAMETER _parameter, uint256 _input) external onlyBondManager {\\n        if (_parameter == PARAMETER.VESTING) {// 0\\n            require(_input >= 10000, \\\"Vesting must be longer than 36 hours\\\");\\n            terms.vestingTerm = _input;\\n        } else if (_parameter == PARAMETER.PAYOUT) {// 1\\n            require(_input <= 1000, \\\"Payout cannot be above 1 percent\\\");\\n            terms.maxPayout = _input;\\n        } else if (_parameter == PARAMETER.DEBT) {// 2\\n            terms.maxDebt = _input;\\n        }\\n    }\\n\\n    /**\\n     *  @notice set control variable adjustment\\n     *  @param _addition bool\\n     *  @param _increment uint\\n     *  @param _target uint\\n     *  @param _buffer uint\\n     */\\n    function setAdjustment(\\n        bool _addition,\\n        uint256 _increment,\\n        uint256 _target,\\n        uint256 _buffer\\n    ) external onlyBondManager {\\n        require(_increment <= terms.controlVariable.mul(30).div(1000), \\\"Increment too large\\\");\\n        require(_target > 0, \\\"setAdjustment: target greater than 0\\\");\\n\\n        adjustment = Adjust({\\n            add: _addition,\\n            rate: _increment,\\n            target: _target,\\n            buffer: _buffer,\\n            lastBlock: block.number\\n        });\\n    }\\n\\n    /**\\n     *  @notice change address of Treasury\\n     *  @param _olyTreasury uint\\n     */\\n    function changeOlyTreasury(address _olyTreasury) external {\\n        address dao = Fees(FEES).DAO();\\n        require(msg.sender == dao, \\\"changeOlyTreasury: Only DAO can replace OLY_TREASURY\\\");\\n        OLY_TREASURY = _olyTreasury;\\n    }\\n\\n    /**\\n     *  @notice subsidy controller checks payouts since last subsidy and resets counter\\n     *  @return payoutSinceLastSubsidy_ uint\\n     */\\n    function paySubsidy() external returns (uint256 payoutSinceLastSubsidy_) {\\n        require(msg.sender == SUBSIDY_ROUTER, \\\"Only subsidy controller\\\");\\n\\n        payoutSinceLastSubsidy_ = payoutSinceLastSubsidy;\\n        payoutSinceLastSubsidy = 0;\\n    }\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice deposit bond\\n     *  @param _amount uint\\n     *  @param _maxPrice uint\\n     *  @param _depositor address\\n     *  @return uint\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _depositor\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"Invalid address\\\");\\n\\n        return __deposit(_amount, _maxPrice, principalToken, _depositor, true);\\n    }\\n\\n    /**\\n     *  @notice deposit bond with an asset(i.e: USDT)\\n     *  @param _depositAmount amount of deposit asset\\n     *  @param _depositAsset deposit asset\\n     *  @param _incomingAsset asset address for swap from deposit asset\\n     *  @param _depositor address of depositor\\n     *  @return uint\\n     */\\n    function depositWithAsset(\\n        uint256 _depositAmount,\\n        uint256 _maxPrice,\\n        address _depositAsset,\\n        address _incomingAsset,\\n        address _depositor\\n    ) external returns (uint256) {\\n        require(_depositor != address(0), \\\"depositWithAsset: Invalid depositor\\\");\\n\\n        (address lpAddress, uint256 lpAmount) = __lpAddressAndAmount(_depositAmount, _depositAsset, _incomingAsset);\\n\\n        // remain payoutToken is transferred to user\\n        __transferAssetToCaller(msg.sender, address(PAYOUT_TOKEN));\\n\\n        require(lpAddress != address(0), \\\"depositWithAsset: Invalid lpAddress\\\");\\n\\n        require(lpAmount > 0, \\\"depositWithAsset: Insufficient lpAmount\\\");\\n\\n        return __deposit(lpAmount, _maxPrice, lpAddress, _depositor, false);\\n    }\\n\\n\\n    /// @notice internal process of deposit()\\n    /// @param _lpAmount amount of principleToken\\n    /// @param _maxPrice amount\\n    /// @param _lpAddress principleToken\\n    /// @param _depositor address of depositor\\n    /// @param _flag if deposit(), true and if depositWithAsset(), false\\n    /// @return uint\\n    function __deposit(\\n        uint256 _lpAmount,\\n        uint256 _maxPrice,\\n        address _lpAddress,\\n        address _depositor,\\n        bool _flag\\n    ) internal returns (uint256) {\\n        \\n        decayDebt();\\n        \\n        require(totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\");\\n\\n        uint256 nativePrice = trueBondPrice();\\n\\n        require(_maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\"); // slippage protection\\n\\n        uint256 value = CUSTOM_TREASURY.valueOfToken(_lpAddress, _lpAmount);\\n        uint256 payout = _payoutFor(value); // payout to bonder is computed\\n\\n        // must be > 0.01 payout token ( underflow protection )\\n        require(payout >= 10**PAYOUT_TOKEN.decimals() / 100, \\\"Bond too small\\\");\\n\\n        require(payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\n\\n        // principal is transferred in\\n        // approved and deposited into the treasury, returning (_amount - profit) payout token\\n         if(_flag) {\\n            IERC20(_lpAddress).safeTransferFrom(msg.sender, address(this), _lpAmount);\\n         }\\n\\n        // profits are calculated\\n        uint256 fee;\\n\\n        // principal is been taken as fee and trasfered to dao\\n        if (lpTokenAsFeeFlag) {\\n            fee = _lpAmount.mul(currentFluxFee()).div(1e6);\\n            if (fee != 0) {\\n                IERC20(_lpAddress).transfer(OLY_TREASURY, fee);\\n            }\\n        } else {\\n            fee = payout.mul(currentFluxFee()).div(1e6);\\n        }\\n\\n        IERC20(_lpAddress).approve(address(CUSTOM_TREASURY), _lpAmount);\\n        CUSTOM_TREASURY.deposit(_lpAddress, _lpAmount.sub(fee), payout);\\n\\n        if (!lpTokenAsFeeFlag && fee != 0) { // fee is transferred to dao\\n            PAYOUT_TOKEN.transfer(OLY_TREASURY, fee);\\n        }\\n\\n        // total debt is increased\\n        totalDebt = totalDebt.add(value);\\n\\n        // depositor info is stored\\n        if(lpTokenAsFeeFlag){\\n            bondInfo[_depositor] = Bond({\\n                payout: bondInfo[_depositor].payout.add(payout),\\n                vesting: terms.vestingTerm,\\n                lastBlock: block.number,\\n                truePricePaid: trueBondPrice()\\n            });\\n        } else {\\n            bondInfo[_depositor] = Bond({\\n                payout: bondInfo[_depositor].payout.add(payout.sub(fee)),\\n                vesting: terms.vestingTerm,\\n                lastBlock: block.number,\\n                truePricePaid: trueBondPrice()\\n            });\\n        }\\n\\n        // indexed events are emitted\\n        emit BondCreated(_lpAmount, payout, block.number.add(terms.vestingTerm));\\n        emit BondPriceChanged(_bondPrice(), debtRatio());\\n\\n        totalPrincipalBonded = totalPrincipalBonded.add(_lpAmount); // total bonded increased\\n        totalPayoutGiven = totalPayoutGiven.add(payout); // total payout increased\\n        payoutSinceLastSubsidy = payoutSinceLastSubsidy.add(payout); // subsidy counter increased\\n\\n        adjust(); // control variable is adjusted\\n        return payout;\\n    }\\n\\n    /**\\n     *  @notice redeem bond for user\\n     *  @return uint\\n     */\\n    function redeem(address _depositor) external returns (uint) {\\n        Bond memory info = bondInfo[_depositor];\\n\\n        uint percentVested = percentVestedFor(_depositor); // (blocks since last interaction / vesting term remaining)\\n\\n        if (percentVested >= 10000) { // if fully vested\\n            delete bondInfo[_depositor]; // delete user info\\n            emit BondRedeemed(_depositor, info.payout, 0); // emit bond data\\n\\n            if(info.payout > 0) {\\n                PAYOUT_TOKEN.transfer(_depositor, info.payout);\\n            }\\n\\n            return info.payout;\\n        } else { // if unfinished\\n            // calculate payout vested\\n            uint256 payout = info.payout.mul(percentVested).div(10000);\\n\\n            // store updated deposit info\\n            bondInfo[_depositor] = Bond({\\n                payout: info.payout.sub(payout),\\n                vesting: info.vesting.sub(block.number.sub(info.lastBlock)),\\n                lastBlock: block.number,\\n                truePricePaid: info.truePricePaid\\n            });\\n\\n            emit BondRedeemed(_depositor, payout, bondInfo[_depositor].payout);\\n\\n            if(payout > 0) {\\n                PAYOUT_TOKEN.transfer(_depositor, payout);\\n            }\\n\\n            return payout;\\n        }\\n    }\\n\\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\\n\\n    /// @notice makes incremental adjustment to control variable\\n    function adjust() internal {\\n        uint256 blockCanAdjust = adjustment.lastBlock.add(adjustment.buffer);\\n        if (adjustment.rate != 0 && block.number >= blockCanAdjust) {\\n            uint256 initial = terms.controlVariable;\\n            if (adjustment.add) {\\n                terms.controlVariable = terms.controlVariable.add(adjustment.rate);\\n                if (terms.controlVariable >= adjustment.target) {\\n                    adjustment.rate = 0;\\n                }\\n            } else {\\n                terms.controlVariable = terms.controlVariable.sub(adjustment.rate);\\n                if (terms.controlVariable <= adjustment.target) {\\n                    adjustment.rate = 0;\\n                }\\n            }\\n            adjustment.lastBlock = block.number;\\n            \\n            emit ControlVariableAdjustment(initial, terms.controlVariable, adjustment.rate, adjustment.add);\\n        }\\n    }\\n\\n    /**\\n     *  @notice reduce total debt\\n     */\\n    function decayDebt() internal {\\n        totalDebt = totalDebt.sub(debtDecay());\\n        lastDecay = block.number;\\n    }\\n\\n    /**\\n     *  @notice calculate current bond price and remove floor if above\\n     *  @return price_ uint\\n     */\\n    function _bondPrice() internal returns (uint256 price_) {\\n        price_ = terms.controlVariable.mul(debtRatio()).div(10**(uint256(PAYOUT_TOKEN.decimals()).sub(5)));\\n        if (price_ < terms.minimumPrice) {\\n            price_ = terms.minimumPrice;\\n        } else if (terms.minimumPrice != 0) {\\n            terms.minimumPrice = 0;\\n        }\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice calculate current bond premium\\n     *  @return price_ uint\\n     */\\n    function bondPrice() public view returns (uint256 price_) {\\n        price_ = terms.controlVariable.mul(debtRatio()).div(10**(uint256(PAYOUT_TOKEN.decimals()).sub(5)));\\n        if (price_ < terms.minimumPrice) {\\n            price_ = terms.minimumPrice;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate true bond price a user pays\\n     *  @return price_ uint\\n     */\\n    function trueBondPrice() public view returns (uint256 price_) {\\n        price_ = bondPrice().add(bondPrice().mul(currentFluxFee()).div(1e6));\\n    }\\n\\n    /**\\n     *  @notice determine maximum bond size\\n     *  @return uint\\n     */\\n    function maxPayout() public view returns (uint) {\\n        uint256 totalSupply = PAYOUT_TOKEN.totalSupply();\\n        if(totalSupply > 10**18*10**PAYOUT_TOKEN.decimals()) totalSupply = 10**18*10**PAYOUT_TOKEN.decimals();\\n        return totalSupply.mul(terms.maxPayout).div(100000);\\n    }\\n\\n    /**\\n     *  @notice calculate total interest due for new bond\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function _payoutFor(uint256 _value) internal view returns (uint256) {\\n        return FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e11);\\n    }\\n\\n    /**\\n     *  @notice calculate user's interest due for new bond, accounting for Flux Fee\\n     *  @param _value uint\\n     *  @return uint\\n     */\\n    function payoutFor(uint256 _value) external view returns (uint256) {\\n        uint256 total = FixedPoint.fraction(_value, bondPrice()).decode112with18().div(1e11);\\n        return total.sub(total.mul(currentFluxFee()).div(1e6));\\n    }\\n\\n    /**\\n     *  @notice calculate current ratio of debt to payout token supply\\n     *  @notice protocols using Flux Pro should be careful when quickly adding large %s to total supply\\n     *  @return debtRatio_ uint\\n     */\\n    function debtRatio() public view returns (uint256 debtRatio_) {\\n        debtRatio_ = FixedPoint\\n            .fraction(currentDebt().mul(10**PAYOUT_TOKEN.decimals()), PAYOUT_TOKEN.totalSupply())\\n            .decode112with18()\\n            .div(1e18);\\n    }\\n\\n    /**\\n     *  @notice calculate debt factoring in decay\\n     *  @return uint\\n     */\\n    function currentDebt() public view returns (uint256) {\\n        return totalDebt.sub(debtDecay());\\n    }\\n\\n    /**\\n     *  @notice amount to decay total debt by\\n     *  @return decay_ uint\\n     */\\n    function debtDecay() public view returns (uint256 decay_) {\\n        uint256 blocksSinceLast = block.number.sub(lastDecay);\\n        decay_ = totalDebt.mul(blocksSinceLast).div(terms.vestingTerm);\\n        if (decay_ > totalDebt) {\\n            decay_ = totalDebt;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate how far into vesting a depositor is\\n     *  @param _depositor address\\n     *  @return percentVested_ uint\\n     */\\n    function percentVestedFor(address _depositor) public view returns (uint256 percentVested_) {\\n        Bond memory bond = bondInfo[_depositor];\\n        uint256 blocksSinceLast = block.number.sub(bond.lastBlock);\\n        uint256 vesting = bond.vesting;\\n\\n        if (vesting > 0) {\\n            percentVested_ = blocksSinceLast.mul(10000).div(vesting);\\n        } else {\\n            percentVested_ = 0;\\n        }\\n    }\\n\\n    /**\\n     *  @notice calculate amount of payout token available for claim by depositor\\n     *  @param _depositor address\\n     *  @return pendingPayout_ uint\\n     */\\n    function pendingPayoutFor(address _depositor) external view returns (uint256 pendingPayout_) {\\n        uint256 percentVested = percentVestedFor(_depositor);\\n        uint256 payout = bondInfo[_depositor].payout;\\n\\n        if (percentVested >= 10000) {\\n            pendingPayout_ = payout;\\n        } else {\\n            pendingPayout_ = payout.mul(percentVested).div(10000);\\n        }\\n    }\\n\\n    /**\\n     *  @notice current fee Flux takes of each bond\\n     *  @return currentFee_ uint\\n     */\\n    function currentFluxFee() public view returns (uint256 currentFee_) {\\n\\n        uint256[] memory tierCeilings = Fees(FEES).getTierCeilings();\\n        uint256[] memory fees = Fees(FEES).getFees();\\n\\n        uint256 feesLength = fees.length;\\n        for (uint256 i; i < feesLength; i++) {\\n            if (totalPrincipalBonded < tierCeilings[i] || i == feesLength - 1) {\\n                if(fees[i] > maxFeeAllowed){\\n                    return maxFeeAllowed;\\n                }else{\\n                    return fees[i];\\n                }\\n\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the caller\\n    function __transferAssetToCaller(address _caller, address _asset) private {\\n        uint256 transferAmount = IERC20(_asset).balanceOf(address(this));\\n        if (transferAmount > 0) {\\n            IERC20(_asset).safeTransfer(_caller, transferAmount);\\n        }\\n    }\\n\\n    /// @notice Swap and AddLiquidity on the UniswapV2\\n    function __lpAddressAndAmount(\\n        uint256 _depositAmount,\\n        address _depositAsset,\\n        address _incomingAsset\\n    ) public payable returns (address lpAddress_, uint256 lpAmount_) {\\n\\n        if(_depositAsset == address(0)) {//ETH\\n            payable(address(HELPER)).transfer(address(this).balance);\\n        } else {\\n            IERC20(_depositAsset).safeTransferFrom(msg.sender, address(this), _depositAmount);\\n\\n            IERC20(_depositAsset).approve(address(HELPER), _depositAmount);\\n        }\\n\\n        bytes memory swapArgs = abi.encode(_depositAmount, _depositAsset, address(PAYOUT_TOKEN), _incomingAsset);\\n\\n        (lpAddress_, lpAmount_) = IHelper(HELPER).swapForDeposit(swapArgs);\\n\\n        emit LPAdded(lpAddress_, lpAmount_);\\n    }\\n}\\n\",\"keccak256\":\"0x1339a10992251a809f49efb717548b128c25ce7eea9552738a660729ebb644f2\",\"license\":\"GPL-3.0\"},\"src/bonding/CustomTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../types/BondOwnable.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\ncontract CustomTreasury is BondOwnable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public immutable payoutToken;\\n\\n    mapping(address => bool) public bondContract;\\n\\n    event BondContractToggled(address bondContract, bool approved);\\n\\n    event Withdraw(address token, address destination, uint256 amount);\\n\\n    constructor(address _payoutToken, address _initialOwner) {\\n        require(_payoutToken != address(0), \\\"CustomTreasury: payoutToken must not be zero address\\\");\\n        payoutToken = _payoutToken;\\n        require(_initialOwner != address(0), \\\"CustomTreasury: initialOwner must not be zero address\\\");\\n        policy = _initialOwner;\\n    }\\n\\n    /* ======== BOND CONTRACT FUNCTION ======== */\\n\\n    /**\\n     *  @notice deposit principle token and recieve back payout token\\n     *  @param _principleTokenAddress address\\n     *  @param _amountPrincipleToken uint\\n     *  @param _amountPayoutToken uint\\n     */\\n    function deposit(\\n        address _principleTokenAddress,\\n        uint256 _amountPrincipleToken,\\n        uint256 _amountPayoutToken\\n    ) external {\\n        require(bondContract[msg.sender], \\\"msg.sender is not a bond contract\\\");\\n        IERC20(_principleTokenAddress).safeTransferFrom(msg.sender, address(this), _amountPrincipleToken);\\n        \\n        require(IERC20(payoutToken).balanceOf(address(this)) >= _amountPayoutToken, \\\"deposit: Insufficient payoutToken balance\\\");\\n        IERC20(payoutToken).safeTransfer(msg.sender, _amountPayoutToken);\\n    }\\n\\n    /* ======== VIEW FUNCTION ======== */\\n\\n    /**\\n     *   @notice returns payout token valuation of priciple\\n     *   @param _principleTokenAddress address\\n     *   @param _amount uint\\n     *   @return value_ uint\\n     */\\n    function valueOfToken(address _principleTokenAddress, uint256 _amount) public view returns (uint256 value_) {\\n        // convert amount to match payout token decimals\\n        value_ = _amount.mul(10**IERC20(payoutToken).decimals()).div(10**IERC20(_principleTokenAddress).decimals());\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice policy can withdraw ERC20 token to desired address\\n     *  @param _token uint\\n     *  @param _destination address\\n     *  @param _amount uint\\n     */\\n    function withdraw(\\n        address _token,\\n        address _destination,\\n        uint256 _amount\\n    ) external onlyPolicy {\\n        IERC20(_token).safeTransfer(_destination, _amount);\\n\\n        emit Withdraw(_token, _destination, _amount);\\n    }\\n\\n    /**\\n        @notice toggle bond contract\\n        @param _bondContract address\\n     */\\n    function toggleBondContract(address _bondContract) external {\\n        require(msg.sender == policy || msg.sender == _bondContract, \\\"Ownable: caller is not the owner\\\");\\n        bondContract[_bondContract] = !bondContract[_bondContract];\\n\\n        emit BondContractToggled(_bondContract, bondContract[_bondContract]);\\n    }\\n}\\n\",\"keccak256\":\"0x5e38ca928ec6c4bb4e056f78cd6684b15e6086c98706b10d0f3e73306612e2c3\",\"license\":\"GPL-3.0\"},\"src/bonding/Factory.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"../types/BondOwnable.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"./CustomBond.sol\\\";\\nimport \\\"./CustomTreasury.sol\\\";\\nimport \\\"./Fees.sol\\\";\\nimport \\\"../interfaces/IFactoryStorage.sol\\\";\\n\\ncontract Factory is BondOwnable {    \\n    using SafeMath for uint256;\\n\\n    address immutable public TREASURY;\\n    address immutable public FACTORY_STORAGE;\\n    address immutable public SUBSIDY_ROUTER;\\n    address immutable public HELPER;\\n    address immutable public FEES;\\n\\n    event BondCreation(address treasury, address bond, address _initialOwner);   \\n\\n    constructor(\\n        address _treasury,\\n        address _factoryStorage,\\n        address _subsidyRouter,\\n        address _helper,\\n        address _fees\\n    ) {\\n        require(_treasury != address(0), \\\"Factory: treasury bad address\\\");\\n        TREASURY = _treasury;\\n        require(_factoryStorage != address(0), \\\"Factory: factoryStorage bad address\\\");\\n        FACTORY_STORAGE = _factoryStorage;\\n        require(_subsidyRouter != address(0), \\\"Factory: subsidyRouter bad address\\\");\\n        SUBSIDY_ROUTER = _subsidyRouter;\\n        require(_helper != address(0), \\\"Factory: helper bad address\\\");\\n        HELPER = _helper;\\n        require(_fees != address(0), \\\"Factory: Fees bad address\\\");\\n        FEES = _fees;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n        @notice deploys custom treasury and custom bond contracts and returns address of both\\n        @param _payoutToken address\\n        @param _principleToken address\\n        @param _initialOwner address\\n        @return _treasury address\\n        @return _bond address\\n     */\\n    function createBondAndTreasury(\\n        address _payoutToken,\\n        address _principleToken,\\n        address _initialOwner\\n    ) external returns (address _treasury, address _bond) {\\n        \\n        uint256[] memory fees = Fees(FEES).getFees();\\n        require(fees.length > 0, \\\"createBondAndTreasury: fees must be setup\\\");\\n\\n        CustomTreasury customTreasury = new CustomTreasury(_payoutToken, _initialOwner);\\n        CustomBond customBond = new CustomBond(\\n            address(customTreasury), \\n            _payoutToken, \\n            _principleToken, \\n            TREASURY, \\n            SUBSIDY_ROUTER, \\n            _initialOwner, \\n            HELPER,\\n            FEES\\n        );\\n\\n        emit BondCreation(address(customTreasury), address(customBond), _initialOwner);                \\n\\n        return IFactoryStorage(FACTORY_STORAGE).pushBond(\\n            _payoutToken, \\n            _principleToken, \\n            address(customTreasury), \\n            address(customBond), \\n            _initialOwner\\n        );\\n    }\\n\\n    /**\\n        @notice deploys custom treasury and custom bond contracts and returns address of both\\n        @param _payoutToken address\\n        @param _principleToken address\\n        @param _customTreasury address\\n        @param _initialOwner address\\n        @return _treasury address\\n        @return _bond address\\n     */\\n    function createBond(\\n        address _payoutToken,\\n        address _principleToken,\\n        address _customTreasury,\\n        address _initialOwner\\n    ) external returns (address _treasury, address _bond) {\\n\\n        uint256[] memory fees = Fees(FEES).getFees();\\n        require(fees.length > 0, \\\"createBond: fees must be setup\\\");\\n\\n        CustomBond bond = new CustomBond(\\n            _customTreasury, \\n            _payoutToken, \\n            _principleToken, \\n            _customTreasury, \\n            SUBSIDY_ROUTER, \\n            _initialOwner, \\n            HELPER,\\n            FEES\\n        );\\n\\n        emit BondCreation(_customTreasury, address(bond), _initialOwner);\\n\\n        return\\n            IFactoryStorage(FACTORY_STORAGE).pushBond(\\n                _payoutToken,\\n                _principleToken,\\n                _customTreasury,\\n                address(bond),\\n                _initialOwner\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcb759c7df6bccfa139f51b3d313987e35ec8be1c410e5b7fb7e9902d6f698af6\",\"license\":\"GPL-3.0\"},\"src/bonding/Fees.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\n\\ncontract Fees {    \\n    using SafeMath for uint256;\\n    \\n    address public DAO;\\n\\n    uint256[] private tierCeilings; \\n    uint256[] private fees;\\n\\n    event FeesAndTierCeilings(uint256[] tierCeilings, uint256[] fees);\\n\\n    modifier onlyDAO() {\\n        require(msg.sender == DAO, \\\"Only DAO call\\\");\\n        _;\\n    }\\n\\n    constructor(address _dao) {\\n        require(_dao != address(0), \\\"Fees: DAO bad address\\\");\\n        DAO = _dao;\\n    }\\n\\n    /// @notice set fee for creating bond\\n    /// @param _tierCeilings uint[]\\n    /// @param _fees uint[]\\n    function setTiersAndFees(\\n        uint256[] calldata _tierCeilings, \\n        uint256[] calldata _fees\\n    ) external onlyDAO {\\n        require(_tierCeilings.length == _fees.length, \\\"setTiersAndFees: Bad items length\\\");\\n\\n        uint256 feeSum = 0;\\n        for (uint256 i; i < _fees.length; i++) {\\n            feeSum = feeSum.add(_fees[i]);\\n        }\\n        \\n        require(feeSum > 0, \\\"setTiersAndFees: Bad fees\\\");\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            tierCeilings.push(_tierCeilings[i]);\\n            fees.push(_fees[i]);\\n        }\\n\\n        emit FeesAndTierCeilings(_tierCeilings, _fees);\\n    }\\n\\n    /// @notice Get fees for bond\\n    function getFees() external view returns (uint256[] memory) {\\n        return fees;\\n    }\\n\\n    /// @notice Get tierCeilings for bond\\n    function getTierCeilings() external view returns (uint256[] memory) {\\n        return tierCeilings;\\n    }\\n}\",\"keccak256\":\"0x1e03108c7be5db2b57312c512c589ec18d97c24f521ce62037278954446d31aa\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xffff7ea2181d88112fddeb2f098b011d90424fe057bd050a5b5b591d95650db4\",\"license\":\"GPL-3.0\"},\"src/interfaces/IFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @title IFactoryStorage Interface\\ninterface IFactoryStorage {\\n    function pushBond(\\n        address _payoutToken,\\n        address _principleToken,\\n        address _customTreasury,\\n        address _customBond,\\n        address _initialOwner\\n    ) external returns (address _treasury, address _bond);\\n}\\n\",\"keccak256\":\"0x4857d023b32a89c0248b3bc027a5af1439d874254c18264c6b65fa0b16ecfd9c\",\"license\":\"GPL-3.0\"},\"src/interfaces/IHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @notice Interface for Helper\\ninterface IHelper {\\n\\n    function swapForDeposit(\\n        bytes calldata _swapArgs\\n    ) external returns (address lpAddress_, uint256 lpAmount_);\\n\\n}\\n\",\"keccak256\":\"0xd73bf2571ca659c4292f3a73c7b6867f8d230321cdc2a725df5f1a7ffb35ee59\",\"license\":\"GPL-3.0\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @title CustomTreasury Interface\\ninterface ITreasury {\\n        \\n    function deposit(\\n        address _principleTokenAddress,\\n        uint256 _amountPrincipleToken,\\n        uint256 _amountPayoutToken\\n    ) external;\\n\\n    function valueOfToken(\\n        address _principleTokenAddress, \\n        uint256 _amount\\n    ) external view returns (uint256 value_);\\n\\n    function toggleBondContract(address _bondContract) external;\\n}\\n\",\"keccak256\":\"0xe6432383ff5c1e8cdeec7b5e2938001b7ed2d40851a5ef523e426c7720a1c0c0\",\"license\":\"GPL-3.0\"},\"src/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory _hex = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = \\\"0\\\";\\n        _addr[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            _addr[2 + i * 2] = _hex[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3 + i * 2] = _hex[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0269cbe46fd8c8ddff0491844d59388d63481537b9708d84016f053bbabf7620\",\"license\":\"GPL-3.0\"},\"src/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xded3b649ee5f7cc2815663310f83737ba60b2cfb6037258d14e80a2bea54903b\",\"license\":\"GPL-3.0\"},\"src/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary BitMath {\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x0078319625a767fbf35881e235245d8543f0f0b5ae30179258aa00c360a1d4fc\",\"license\":\"GPL-3.0\"},\"src/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/Babylonian.sol\\\";\\nimport \\\"../libraries/BitMath.sol\\\";\\n\\nlibrary FixedPoint {\\n    struct Uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    struct Uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    function decode(Uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    function decode112with18(Uq112x112 memory self) internal pure returns (uint256) {\\n        return uint256(self._x) / 5192296858534827;\\n    }\\n\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (Uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.Uq112x112(0);\\n\\n        if (numerator <= uint144(-1)) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return Uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= uint224(-1), \\\"FixedPoint::fraction: overflow\\\");\\n            return Uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // square root of a Uq112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(Uq112x112 memory self) internal pure returns (Uq112x112 memory) {\\n        if (self._x <= uint144(-1)) {\\n            return Uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return Uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0x7692d27d46b33e6c3f2a0176420e2dc2e26da56786401847ed7e6a5827fda92f\",\"license\":\"GPL-3.0\"},\"src/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 k, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        k = x * y;\\n        h = mm - k;\\n        if (mm < k) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 k,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        k /= pow2;\\n        k += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return k * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 k, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > k) h -= 1;\\n        k -= mm;\\n        require(h < d, \\\"FullMath::mulDiv: overflow\\\");\\n        return fullDiv(k, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0xa5032dc64565f497bbf7be164401de83a72bb8a6964e6ff30921ad52589e6198\",\"license\":\"GPL-3.0\"},\"src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7e973b7df6348ae8dc725c39d735946a2f200dd8077295a583156c56c159542\",\"license\":\"GPL-3.0\"},\"src/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d4a7d568edc5f572551495050789eb8e6d766a737cf3eaffee4508426da2518\",\"license\":\"GPL-3.0\"},\"src/types/BondOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\ncontract BondOwnable {\\n    address public policy;\\n    address public bondManager;\\n\\n    constructor() {\\n        policy = msg.sender;\\n        bondManager = msg.sender;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == policy, \\\"BondOwnable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyBondManager() {\\n        require(msg.sender == bondManager, \\\"BondOwnable: caller is not the bond manager\\\");\\n        _;\\n    }\\n    function transferBondManagement(address _newManager) external onlyPolicy {\\n        require(_newManager != address(0), \\\"BondOwnable: _newManager must not be zero address\\\");\\n        bondManager = _newManager;\\n    }\\n\\n    function transferOwnership(address _newOwner) external onlyPolicy {\\n        require(_newOwner != address(0), \\\"BondOwnable: newOwner must not be zero address\\\");\\n        policy = _newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xe0ab88188eece4064755444ca9f386d1a30bde18a7545232375d9855a077c83c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b5060405161601c38038061601c833981810160405260a081101561003457600080fd5b50805160208201516040830151606084015160809094015160008054336001600160a01b03199182168117909255600180549091169091179055929391929091906001600160a01b0385166100d0576040805162461bcd60e51b815260206004820152601d60248201527f466163746f72793a207472656173757279206261642061646472657373000000604482015290519081900360640190fd5b6001600160601b0319606086901b166080526001600160a01b0384166101275760405162461bcd60e51b8152600401808060200182810382526023815260200180615ff96023913960400191505060405180910390fd5b6001600160601b0319606085901b1660a0526001600160a01b03831661017e5760405162461bcd60e51b8152600401808060200182810382526022815260200180615fd76022913960400191505060405180910390fd5b6001600160601b0319606084901b1660c0526001600160a01b0382166101eb576040805162461bcd60e51b815260206004820152601b60248201527f466163746f72793a2068656c7065722062616420616464726573730000000000604482015290519081900360640190fd5b6001600160601b0319606083901b1660e0526001600160a01b038116610258576040805162461bcd60e51b815260206004820152601960248201527f466163746f72793a204665657320626164206164647265737300000000000000604482015290519081900360640190fd5b6001600160601b031960609190911b16610100525050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c615ce26102f5600039806102a0528061046c528061064c528061086c5280610a1852508061044b528061084b5280610bd4525080610429528061082952806109f452508061027752806105ab52806109ab52508061025352806108085250615ce26000f3fe60806040523480156200001157600080fd5b5060043610620000dc5760003560e01c80634d9793bc116200008d578063e0cf52161162000063578063e0cf521614620001e4578063f2fde38b146200020f578063f551bf20146200023857620000dc565b80634d9793bc146200019557806375796e7714620001d05780638b7b23ee14620001da57620000dc565b80632e63f2e811620000c35780632e63f2e81462000111578063321c920b146200011b578063363cc427146200018b57620000dc565b80630505c8c914620000e15780632d2c55651462000107575b600080fd5b620000eb62000242565b604080516001600160a01b039092168252519081900360200190f35b620000eb62000251565b620000eb62000275565b6200015c600480360360808110156200013357600080fd5b506001600160a01b03813581169160208101358216916040820135811691606001351662000299565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390f35b620000eb62000636565b6200015c60048036036060811015620001ad57600080fd5b506001600160a01b03813581169160208101358216916040909101351662000645565b620000eb620009f2565b620000eb62000a16565b6200020d60048036036020811015620001fc57600080fd5b50356001600160a01b031662000a3a565b005b6200020d600480360360208110156200022757600080fd5b50356001600160a01b031662000b06565b620000eb62000bd2565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db8d55f16040518163ffffffff1660e01b815260040160006040518083038186803b158015620002f857600080fd5b505afa1580156200030d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200033757600080fd5b81019080805160405193929190846401000000008211156200035857600080fd5b9083019060208201858111156200036e57600080fd5b82518660208202830111640100000000821117156200038c57600080fd5b82525081516020918201928201910280838360005b83811015620003bb578181015183820152602001620003a1565b505050509050016040525050509050600081511162000421576040805162461bcd60e51b815260206004820152601e60248201527f637265617465426f6e643a2066656573206d7573742062652073657475700000604482015290519081900360640190fd5b6000858888887f0000000000000000000000000000000000000000000000000000000000000000897f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000604051620004999062000bf6565b6001600160a01b039889168152968816602088015294871660408088019190915293871660608701529186166080860152851660a0850152841660c0840152921660e082015290519081900361010001906000f08015801562000500573d6000803e3d6000fd5b50604080516001600160a01b03808a168252808416602083015288168183015290519192507f34c882c38c88d2da38fac8717334976b41c856bc28585db7383e4835d2cc73cf919081900360600190a1604080517f65f99cd00000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152898116602483015288811660448301528381166064830152878116608483015282517f0000000000000000000000000000000000000000000000000000000000000000909116926365f99cd09260a480820193918290030181600087803b158015620005f257600080fd5b505af115801562000607573d6000803e3d6000fd5b505050506040513d60408110156200061e57600080fd5b50805160209091015190999098509650505050505050565b6001546001600160a01b031681565b60008060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db8d55f16040518163ffffffff1660e01b815260040160006040518083038186803b158015620006a457600080fd5b505afa158015620006b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015620006e357600080fd5b81019080805160405193929190846401000000008211156200070457600080fd5b9083019060208201858111156200071a57600080fd5b82518660208202830111640100000000821117156200073857600080fd5b82525081516020918201928201910280838360005b83811015620007675781810151838201526020016200074d565b5050505090500160405250505090506000815111620007b85760405162461bcd60e51b815260040180806020018281038252602981526020018062005c846029913960400191505060405180910390fd5b60008685604051620007ca9062000c04565b6001600160a01b03928316815291166020820152604080519182900301906000f080158015620007fe573d6000803e3d6000fd5b50905060008188887f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000604051620008999062000bf6565b6001600160a01b039889168152968816602088015294871660408088019190915293871660608701529186166080860152851660a0850152841660c0840152921660e082015290519081900361010001906000f08015801562000900573d6000803e3d6000fd5b50604080516001600160a01b038086168252808416602083015289168183015290519192507f34c882c38c88d2da38fac8717334976b41c856bc28585db7383e4835d2cc73cf919081900360600190a1604080517f65f99cd00000000000000000000000000000000000000000000000000000000081526001600160a01b038a81166004830152898116602483015284811660448301528381166064830152888116608483015282517f0000000000000000000000000000000000000000000000000000000000000000909116926365f99cd09260a480820193918290030181600087803b158015620005f257600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331462000a855760405162461bcd60e51b815260040180806020018281038252602481526020018062005c606024913960400191505060405180910390fd5b6001600160a01b03811662000acc5760405162461bcd60e51b815260040180806020018281038252603181526020018062005c2f6031913960400191505060405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b0316331462000b515760405162461bcd60e51b815260040180806020018281038252602481526020018062005c606024913960400191505060405180910390fd5b6001600160a01b03811662000b985760405162461bcd60e51b815260040180806020018281038252602e81526020018062005c01602e913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b613fc18062000c1383390190565b61102d8062004bd48339019056fe61012060405261c3506009553480156200001857600080fd5b5060405162003fc138038062003fc18339810160408190526200003b9162000294565b60008054336001600160a01b031991821681179092556001805490911690911790556001600160a01b0388166200008f5760405162461bcd60e51b81526004016200008690620004b0565b60405180910390fd5b6001600160601b0319606089901b1660a0526001600160a01b038716620000ca5760405162461bcd60e51b8152600401620000869062000372565b6001600160601b0319606088901b166080526001600160a01b038616620001055760405162461bcd60e51b81526004016200008690620003e0565b600380546001600160a01b0319166001600160a01b03888116919091179091558516620001465760405162461bcd60e51b815260040162000086906200033b565b600280546001600160a01b0319166001600160a01b03878116919091179091558416620001875760405162461bcd60e51b8152600401620000869062000417565b6001600160601b0319606085901b1660c0526001600160a01b038316620001c25760405162461bcd60e51b81526004016200008690620003a9565b600080546001600160a01b03199081166001600160a01b038681169182179093556001805490921617905582166200020e5760405162461bcd60e51b8152600401620000869062000479565b6001600160601b0319606083901b1660e0526001600160a01b038116620002495760405162461bcd60e51b815260040162000086906200044e565b60601b6001600160601b03191661010052505060148054600160ff1990911617905550620004e79350505050565b80516001600160a01b03811681146200028f57600080fd5b919050565b600080600080600080600080610100898b031215620002b1578384fd5b620002bc8962000277565b9750620002cc60208a0162000277565b9650620002dc60408a0162000277565b9550620002ec60608a0162000277565b9450620002fc60808a0162000277565b93506200030c60a08a0162000277565b92506200031c60c08a0162000277565b91506200032c60e08a0162000277565b90509295985092959890939650565b60208082526018908201527f466163746f72793a206f6c795472656173757279206261640000000000000000604082015260600190565b60208082526018908201527f466163746f72793a207061796f7574546f6b656e206261640000000000000000604082015260600190565b60208082526019908201527f466163746f72793a20696e697469616c4f776e65722062616400000000000000604082015260600190565b6020808252601b908201527f466163746f72793a207072696e636970616c546f6b656e206261640000000000604082015260600190565b6020808252601a908201527f466163746f72793a2073756273696479526f7574657220626164000000000000604082015260600190565b602080825260119082015270119858dd1bdc9e4e8811915154c8189859607a1b604082015260600190565b60208082526013908201527f466163746f72793a2068656c7065722062616400000000000000000000000000604082015260600190565b6020808252601b908201527f466163746f72793a20637573746f6d5472656173757279206261640000000000604082015260600190565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c613a13620005ae60003980610c775280610ff55280611be35280611c7c525080610a085280610aa85280610b9f5280611da4525080610f5f528061154d525080610dcd52806114d152806120d1528061237752806123fe525080610b2c5280610ed9528061115752806112f452806115d75280611676528061172352806117fa528061188d52806119355280611ab3528061216b52806124b15280612b2f5250613a136000f3fe6080604052600436106102d55760003560e01c80638dbdbe6d11610179578063dbc162de116100d6578063e73f821c1161008a578063f551bf2011610064578063f551bf201461071e578063f5c2ab5b14610733578063fc7b9c1814610748576102dc565b8063e73f821c146106d4578063f2fde38b146106e9578063f4c10ba814610709576102dc565b8063e0cf5216116100bb578063e0cf52161461068a578063e2f6f511146106aa578063e392a262146106bf576102dc565b8063dbc162de14610660578063e0176de814610675576102dc565b8063a9bc6b711161012d578063cea55f5711610112578063cea55f5714610610578063d502562514610625578063d7ccfb0b1461064b576102dc565b8063a9bc6b71146105cb578063cd1234b3146105e0576102dc565b8063966242971161015e57806396624297146105815780639f8c657b14610596578063a50603b2146105ab576102dc565b80638dbdbe6d1461054157806395a2251f14610561576102dc565b806334b8e4751161023257806356683386116101e65780637927ebf8116101c05780637927ebf8146104f75780637cbe044c146105175780638b7b23ee1461052c576102dc565b806356683386146104ad57806375796e77146104cd578063759076e5146104e2576102dc565b80633a301b2a116102175780633a301b2a14610452578063451ee4a114610467578063507930ec1461048d576102dc565b806334b8e4751461041d578063363cc4271461043d576102dc565b80631ba7182a116102895780631ed4a8691161026e5780631ed4a869146103c75780632bab6bde146103e85780633340ed85146103fd576102dc565b80631ba7182a146103855780631e321a0f146103a7576102dc565b80630505c8c9116102ba5780630505c8c91461032c5780630a7484891461034e5780631a3d006814610363576102dc565b806301a84a1b146102e157806301b88ee81461030c576102dc565b366102dc57005b600080fd5b3480156102ed57600080fd5b506102f661075d565b60405161030391906137c8565b60405180910390f35b34801561031857600080fd5b506102f6610327366004612f98565b610763565b34801561033857600080fd5b506103416107bc565b6040516103039190613290565b34801561035a57600080fd5b506102f66107cb565b34801561036f57600080fd5b5061038361037e3660046130c9565b610803565b005b34801561039157600080fd5b5061039a6108f5565b60405161030391906132de565b3480156103b357600080fd5b506103836103c2366004613103565b610903565b6103da6103d5366004613161565b6109ea565b6040516103039291906132a4565b3480156103f457600080fd5b506102f6610c6d565b34801561040957600080fd5b50610383610418366004612f98565b610c73565b34801561042957600080fd5b50610383610438366004613091565b610d60565b34801561044957600080fd5b50610341610dbc565b34801561045e57600080fd5b50610341610dcb565b34801561047357600080fd5b5061047c610def565b6040516103039594939291906132e9565b34801561049957600080fd5b506102f66104a8366004612f98565b610e07565b3480156104b957600080fd5b506102f66104c83660046131cf565b610e99565b3480156104d957600080fd5b50610341610f5d565b3480156104ee57600080fd5b506102f6610f81565b34801561050357600080fd5b506102f6610512366004613131565b610f9a565b34801561052357600080fd5b506102f6610fed565b34801561053857600080fd5b50610341610ff3565b34801561054d57600080fd5b506102f661055c3660046131a2565b611017565b34801561056d57600080fd5b506102f661057c366004612f98565b611063565b34801561058d57600080fd5b5061039a611389565b3480156105a257600080fd5b50610341611392565b3480156105b757600080fd5b506103836105c636600461322d565b6113a1565b3480156105d757600080fd5b506102f6611540565b3480156105ec57600080fd5b506106006105fb366004612f98565b611597565b6040516103039493929190613839565b34801561061c57600080fd5b506102f66115be565b34801561063157600080fd5b5061063a611705565b604051610303959493929190613854565b34801561065757600080fd5b506102f6611717565b34801561066c57600080fd5b506103416117e6565b34801561068157600080fd5b506102f66117f5565b34801561069657600080fd5b506103836106a5366004612f98565b6119f4565b3480156106b657600080fd5b50610341611ab1565b3480156106cb57600080fd5b506102f6611ad5565b3480156106e057600080fd5b506102f6611b1a565b3480156106f557600080fd5b50610383610704366004612f98565b611b20565b34801561071557600080fd5b506102f6611bdd565b34801561072a57600080fd5b50610341611da2565b34801561073f57600080fd5b506102f6611dc6565b34801561075457600080fd5b506102f6611dcc565b60085481565b60008061076f83610e07565b6001600160a01b038416600090815260156020526040902054909150612710821061079c578092506107b5565b6107b26127106107ac8385611dd2565b90611e34565b92505b5050919050565b6000546001600160a01b031681565b60006107fe6107f0620f42406107ac6107e2611bdd565b6107ea611717565b90611dd2565b6107f8611717565b90611e76565b905090565b6001546001600160a01b0316331461084c5760405162461bcd60e51b815260040180806020018281038252602b815260200180613989602b913960400191505060405180910390fd5b600a54610862906103e8906107ac90601e611dd2565b83111561088a5760405162461bcd60e51b81526004016108819061342a565b60405180910390fd5b600082116108aa5760405162461bcd60e51b8152600401610881906136d7565b6040805160a0810182529415158086526020860185905290850183905260608501829052436080909501859052600f805460ff19169091179055601092909255601155601255601355565b601454610100900460ff1681565b6001546001600160a01b0316331461094c5760405162461bcd60e51b815260040180806020018281038252602b815260200180613989602b913960400191505060405180910390fd5b600082600281111561095a57fe5b141561098c576127108110156109825760405162461bcd60e51b8152600401610881906135c0565b600b8190556109e6565b600182600281111561099a57fe5b14156109cc576103e88111156109c25760405162461bcd60e51b8152600401610881906133f5565b600d8190556109e6565b60028260028111156109da57fe5b14156109e657600e8190555b5050565b6000806001600160a01b038416610a56576040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016904780156108fc02916000818181858888f19350505050158015610a50573d6000803e3d6000fd5b50610b26565b610a6b6001600160a01b038516333088611ed0565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063095ea7b390610ad2907f00000000000000000000000000000000000000000000000000000000000000009089906004016132a4565b602060405180830381600087803b158015610aec57600080fd5b505af1158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906130ad565b505b606085857f000000000000000000000000000000000000000000000000000000000000000086604051602001610b5f94939291906137d1565b60408051601f19818403018152908290527fc20fd7a200000000000000000000000000000000000000000000000000000000825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c20fd7a290610bd490849060040161330e565b6040805180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c259190612fd0565b60405191945092507fb854df037407615523ac9e42e11c9bf6aa3f93c43a0647f04f6f5814d37c39e090610c5c90859085906132a4565b60405180910390a150935093915050565b60055481565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166398fabd3a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d069190612fb4565b9050336001600160a01b03821614610d305760405162461bcd60e51b8152600401610881906134cf565b506002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610da95760405162461bcd60e51b81526004018080602001828103825260248152602001806139656024913960400191505060405180910390fd5b6014805460ff1916911515919091179055565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f5460105460115460125460135460ff9094169385565b6000610e11612f5e565b506001600160a01b03821660009081526015602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909190610e67904390611f49565b60208301519091508015610e8c57610e85816107ac84612710611dd2565b9350610e91565b600093505b505050919050565b60006001600160a01b038216610ec15760405162461bcd60e51b815260040161088190613734565b600080610ecf8887876109ea565b91509150610efd337f0000000000000000000000000000000000000000000000000000000000000000611f8b565b6001600160a01b038216610f235760405162461bcd60e51b81526004016108819061367a565b60008111610f435760405162461bcd60e51b815260040161088190613361565b610f51818884876000612044565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107fe610f8e611ad5565b60065490611f49565b90565b600080610fbf64174876e8006107ac610fba86610fb5611717565b61275c565b6128de565b9050610fe4610fdd620f42406107ac610fd6611bdd565b8590611dd2565b8290611f49565b9150505b919050565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b03821661103f5760405162461bcd60e51b8152600401610881906133be565b60035461105b90859085906001600160a01b0316856001612044565b949350505050565b600061106d612f5e565b506001600160a01b0382166000908152601560209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152906110c084610e07565b905061271081106111e9576001600160a01b0384166000908152601560205260408082208281556001810183905560028101839055600301829055835190517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b19261112f9288929091906132bd565b60405180910390a18151156111e057815160405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9161118c9188916004016132a4565b602060405180830381600087803b1580156111a657600080fd5b505af11580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111de91906130ad565b505b50519050610fe8565b815160009061120090612710906107ac9085611dd2565b90506040518060800160405280611224838660000151611f4990919063ffffffff16565b815260200161124e611243866040015143611f4990919063ffffffff16565b602087015190611f49565b8152436020808301919091526060808701516040938401526001600160a01b0389166000908152601583528390208451808255928501516001820155848401516002820155930151600390930192909255517f51c99f515c87b0d95ba97f616edd182e8f161c4932eac17c6fefe9dab58b77b1916112cf91889185916132bd565b60405180910390a1801561137f5760405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061132b90889085906004016132a4565b602060405180830381600087803b15801561134557600080fd5b505af1158015611359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137d91906130ad565b505b9250610fe8915050565b60145460ff1681565b6002546001600160a01b031681565b6000546001600160a01b031633146113ea5760405162461bcd60e51b81526004018080602001828103825260248152602001806139656024913960400191505060405180910390fd5b600a541580156113fa5750600086115b6114165760405162461bcd60e51b81526004016108819061361d565b6127108510156114385760405162461bcd60e51b8152600401610881906135c0565b6103e883111561145a5760405162461bcd60e51b8152600401610881906133f5565b6040805160a0810182528781526020810187905280820186905260608101859052608001839052600a879055600b869055600c859055600d849055600e839055600682905543600755517ff95c23060000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f95c230690611506903090600401613290565b600060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b50505050505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461158a5760405162461bcd60e51b81526004016108819061352c565b5060088054600090915590565b60156020526000908152604090208054600182015460028301546003909301549192909184565b60006107fe670de0b6b3a76400006107ac610fba6116747f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561162e57600080fd5b505afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611666919061326f565b60ff16600a0a6107ea610f81565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cd57600080fd5b505afa1580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190613149565b600a54600b54600c54600d54600e5485565b60006117d26117bb60057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561177a57600080fd5b505afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b2919061326f565b60ff1690611f49565b600a0a6107ac6117c96115be565b600a5490611dd2565b600c54909150811015610f975750600c5490565b6003546001600160a01b031681565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561185157600080fd5b505afa158015611865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118899190613149565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e457600080fd5b505afa1580156118f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191c919061326f565b60ff16600a0a670de0b6b3a7640000028111156119d7577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c4919061326f565b60ff16600a0a670de0b6b3a76400000290505b600d546119ee90620186a0906107ac908490611dd2565b91505090565b6000546001600160a01b03163314611a3d5760405162461bcd60e51b81526004018080602001828103825260248152602001806139656024913960400191505060405180910390fd5b6001600160a01b038116611a825760405162461bcd60e51b81526004018080602001828103825260318152602001806139136031913960400191505060405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080611aed60075443611f4990919063ffffffff16565b600b54600654919250611b04916107ac9084611dd2565b9150600654821115611b165760065491505b5090565b60095481565b6000546001600160a01b03163314611b695760405162461bcd60e51b81526004018080602001828103825260248152602001806139656024913960400191505060405180910390fd5b6001600160a01b038116611bae5760405162461bcd60e51b815260040180806020018281038252602e8152602001806138bf602e913960400191505060405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8f43c8b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611c3a57600080fd5b505afa158015611c4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c769190810190612ffd565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db8d55f16040518163ffffffff1660e01b815260040160006040518083038186803b158015611cd357600080fd5b505afa158015611ce7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d0f9190810190612ffd565b805190915060005b81811015611d9b57838181518110611d2b57fe5b60200260200101516004541080611d4457506001820381145b15611d9357600954838281518110611d5857fe5b60200260200101511115611d7457600954945050505050610f97565b828181518110611d8057fe5b6020026020010151945050505050610f97565b600101611d17565b5050505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60075481565b60065481565b600082611de157506000611e2e565b82820282848281611dee57fe5b0414611e2b5760405162461bcd60e51b81526004018080602001828103825260218152602001806139446021913960400191505060405180910390fd5b90505b92915050565b6000611e2b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128f6565b600082820183811015611e2b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd00000000000000000000000000000000000000000000000000000000179052611f43908590612998565b50505050565b6000611e2b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612a49565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316906370a0823190611fd3903090600401613290565b60206040518083038186803b158015611feb57600080fd5b505afa158015611fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120239190613149565b9050801561203f5761203f6001600160a01b0383168483612aa3565b505050565b600061204e612af5565b600e5460065411156120725760405162461bcd60e51b815260040161088190613461565b600061207c6107cb565b90508086101561209e5760405162461bcd60e51b815260040161088190613563565b6040517fd1b317e50000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d1b317e5906121089089908c906004016132a4565b60206040518083038186803b15801561212057600080fd5b505afa158015612134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121589190613149565b9050600061216582612b09565b905060647f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c257600080fd5b505afa1580156121d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fa919061326f565b60ff16600a0a8161220757fe5b048110156122275760405162461bcd60e51b815260040161088190613498565b61222f6117f5565b81111561224e5760405162461bcd60e51b815260040161088190613791565b8415612269576122696001600160a01b03881633308c611ed0565b60145460009060ff161561232557612290620f42406107ac612289611bdd565b8d90611dd2565b905080156123205760025460405163a9059cbb60e01b81526001600160a01b038a81169263a9059cbb926122cc929091169085906004016132a4565b602060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231e91906130ad565b505b61233a565b612337620f42406107ac610fd6611bdd565b90505b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0389169063095ea7b3906123a1907f0000000000000000000000000000000000000000000000000000000000000000908e906004016132a4565b602060405180830381600087803b1580156123bb57600080fd5b505af11580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f391906130ad565b506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630efe6a8b8961242e8d85611f49565b856040518463ffffffff1660e01b815260040161244d939291906132bd565b600060405180830381600087803b15801561246757600080fd5b505af115801561247b573d6000803e3d6000fd5b505060145460ff1615915050801561249257508015155b156125405760025460405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb926124ec92919091169085906004016132a4565b602060405180830381600087803b15801561250657600080fd5b505af115801561251a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253e91906130ad565b505b60065461254d9084611e76565b60065560145460ff16156125ea57604080516080810182526001600160a01b038916600090815260156020529190912054819061258a9085611e76565b8152600b5460208201524360408201526060016125a56107cb565b90526001600160a01b0388166000908152601560209081526040918290208351815590830151600182015590820151600282015560609091015160039091015561267e565b6040805160808101909152806126226126038585611f49565b6001600160a01b038b1660009081526015602052604090205490611e76565b8152600b54602082015243604082015260600161263d6107cb565b90526001600160a01b038816600090815260156020908152604091829020835181559083015160018201559082015160028201556060909101516003909101555b7fb7ce5a2d90f1705ca02547b0eb827724683e0df3b809477ae4326d0eefed0bc08a836126b9600a6001015443611e7690919063ffffffff16565b6040516126c893929190613806565b60405180910390a17f2cb17bd1fd2a1fecfefae2de1e6a59194abaa62179652924ccdca01617f0bf166126f9612b23565b6127016115be565b60405161270f9291906137f8565b60405180910390a1600454612724908b611e76565b6004556005546127349083611e76565b6005556008546127449083611e76565b60085561274f612bac565b5098975050505050505050565b612764612f86565b600082116127a35760405162461bcd60e51b81526004018080602001828103825260268152602001806138ed6026913960400191505060405180910390fd5b826127bd5750604080516020810190915260008152611e2e565b71ffffffffffffffffffffffffffffffffffff831161286457600082607085901b816127e557fe5b0490506001600160e01b03811115612844576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280826001600160e01b0316815250915050611e2e565b6000612880846e01000000000000000000000000000085612c81565b90506001600160e01b03811115612844576040805162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab6001600160e01b039091160490565b600081836129825760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561294757818101518382015260200161292f565b50505050905090810190601f1680156129745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161298e57fe5b0495945050505050565b60606129ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d219092919063ffffffff16565b80519091501561203f57808060200190516020811015612a0c57600080fd5b505161203f5760405162461bcd60e51b815260040180806020018281038252602a8152602001806139b4602a913960400191505060405180910390fd5b60008184841115612a9b5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561294757818101518382015260200161292f565b505050900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261203f908490612998565b612b00610f8e611ad5565b60065543600755565b6000611e2e64174876e8006107ac610fba85610fb5611717565b6000612b866117bb60057f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561177a57600080fd5b600c54909150811015612b9c5750600c54610f97565b600c5415610f97576000600c5590565b601254601354600091612bbf9190611e76565b60105490915015801590612bd35750804310155b15612c7e57600a54600f5460ff1615612c0d57601054600a54612bf591611e76565b600a81905560115411612c085760006010555b612c2f565b601054600a54612c1c91611f49565b600a81905560115410612c2f5760006010555b43601355600a54601054600f546040517fb923e581a0f83128e9e1d8297aa52b18d6744310476e0b54509c054cd7a93b2a93612c749386939192909160ff169061381c565b60405180910390a1505b50565b6000806000612c908686612d30565b9150915060008480612c9e57fe5b868809905082811115612cb2576001820391505b8083039250848210612d0b576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b612d16838387612d7b565b979650505050505050565b606061105b8484600085612deb565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84860990508385029250828103915082811015612d73576001820391505b509250929050565b60008181038216808381612d8b57fe5b049250808581612d9757fe5b049450808160000381612da657fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6060612df685612f58565b612e47576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612e865780518252601f199092019160209182019101612e67565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612ee8576040519150601f19603f3d011682016040523d82523d6000602084013e612eed565b606091505b50915091508115612f0157915061105b9050565b805115612f115780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561294757818101518382015260200161292f565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60408051602081019091526000815290565b600060208284031215612fa9578081fd5b8135611e2b8161389b565b600060208284031215612fc5578081fd5b8151611e2b8161389b565b60008060408385031215612fe2578081fd5b8251612fed8161389b565b6020939093015192949293505050565b6000602080838503121561300f578182fd5b825167ffffffffffffffff80821115613026578384fd5b818501915085601f830112613039578384fd5b81518181111561304557fe5b8381029150613055848301613877565b8181528481019084860184860187018a101561306f578788fd5b8795505b8386101561274f578051835260019590950194918601918601613073565b6000602082840312156130a2578081fd5b8135611e2b816138b0565b6000602082840312156130be578081fd5b8151611e2b816138b0565b600080600080608085870312156130de578182fd5b84356130e9816138b0565b966020860135965060408601359560600135945092505050565b60008060408385031215613115578182fd5b823560038110613123578283fd5b946020939093013593505050565b600060208284031215613142578081fd5b5035919050565b60006020828403121561315a578081fd5b5051919050565b600080600060608486031215613175578283fd5b8335925060208401356131878161389b565b915060408401356131978161389b565b809150509250925092565b6000806000606084860312156131b6578283fd5b833592506020840135915060408401356131978161389b565b600080600080600060a086880312156131e6578081fd5b853594506020860135935060408601356131ff8161389b565b9250606086013561320f8161389b565b9150608086013561321f8161389b565b809150509295509295909350565b60008060008060008060c08789031215613245578081fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600060208284031215613280578081fd5b815160ff81168114611e2b578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b9415158552602085019390935260408401919091526060830152608082015260a00190565b6000602080835283518082850152825b8181101561333a5785810183015185820160400152820161331e565b8181111561334b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526027908201527f6465706f7369745769746841737365743a20496e73756666696369656e74206c60408201527f70416d6f756e7400000000000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b6020808252818101527f5061796f75742063616e6e6f742062652061626f766520312070657263656e74604082015260600190565b60208082526013908201527f496e6372656d656e7420746f6f206c6172676500000000000000000000000000604082015260600190565b60208082526014908201527f4d61782063617061636974792072656163686564000000000000000000000000604082015260600190565b6020808252600e908201527f426f6e6420746f6f20736d616c6c000000000000000000000000000000000000604082015260600190565b60208082526034908201527f6368616e67654f6c7954726561737572793a204f6e6c792044414f2063616e2060408201527f7265706c616365204f4c595f5452454153555259000000000000000000000000606082015260800190565b60208082526017908201527f4f6e6c79207375627369647920636f6e74726f6c6c6572000000000000000000604082015260600190565b60208082526023908201527f536c697070616765206c696d69743a206d6f7265207468616e206d617820707260408201527f6963650000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f56657374696e67206d757374206265206c6f6e676572207468616e203336206860408201527f6f75727300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f696e697469616c697a65426f6e643a20636f6e74726f6c5661726961626c652060408201527f6d75737420626520300000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f6465706f7369745769746841737365743a20496e76616c6964206c704164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f73657441646a7573746d656e743a20746172676574206772656174657220746860408201527f616e203000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f6465706f7369745769746841737365743a20496e76616c6964206465706f736960408201527f746f720000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f426f6e6420746f6f206c61726765000000000000000000000000000000000000604082015260600190565b90815260200190565b9384526001600160a01b039283166020850152908216604084015216606082015260800190565b918252602082015260400190565b9283526020830191909152604082015260600190565b938452602084019290925260408301521515606082015260800190565b93845260208401929092526040830152606082015260800190565b948552602085019390935260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff8111828210171561389357fe5b604052919050565b6001600160a01b0381168114612c7e57600080fd5b8015158114612c7e57600080fdfe426f6e644f776e61626c653a206e65774f776e6572206d757374206e6f74206265207a65726f20616464726573734669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f426f6e644f776e61626c653a205f6e65774d616e61676572206d757374206e6f74206265207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77426f6e644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572426f6e644f776e61626c653a2063616c6c6572206973206e6f742074686520626f6e64206d616e616765725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e27535b01a9792e36dd0050ed9190607b4d7d9e63459dbce8de15a791eeb5f4b64736f6c6343000705003360a060405234801561001057600080fd5b5060405161102d38038061102d8339818101604052604081101561003357600080fd5b50805160209091015160008054336001600160a01b031991821681179092556001805490911690911790556001600160a01b0382166100a35760405162461bcd60e51b8152600401808060200182810382526034815260200180610ff96034913960400191505060405180910390fd5b6001600160601b0319606083901b166080526001600160a01b0381166100fa5760405162461bcd60e51b8152600401808060200182810382526035815260200180610fc46035913960400191505060405180910390fd5b600080546001600160a01b039092166001600160a01b03199092169190911790555060805160601c610e7c610148600039806102c052806103a152806103f352806104bf5250610e7c6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063d1b317e511610076578063e0cf52161161005b578063e0cf5216146101d9578063f2fde38b146101ff578063f95c230614610225576100be565b8063d1b317e514610165578063d9caed12146101a3576100be565b806324705db3116100a757806324705db31461011b578063363cc427146101555780634efa82b61461015d576100be565b80630505c8c9146100c35780630efe6a8b146100e7575b600080fd5b6100cb61024b565b604080516001600160a01b039092168252519081900360200190f35b610119600480360360608110156100fd57600080fd5b506001600160a01b03813516906020810135906040013561025a565b005b6101416004803603602081101561013157600080fd5b50356001600160a01b03166103cd565b604080519115158252519081900360200190f35b6100cb6103e2565b6100cb6103f1565b6101916004803603604081101561017b57600080fd5b506001600160a01b038135169060200135610415565b60408051918252519081900360200190f35b610119600480360360608110156101b957600080fd5b506001600160a01b0381358116916020810135909116906040013561054c565b610119600480360360208110156101ef57600080fd5b50356001600160a01b03166105f8565b6101196004803603602081101561021557600080fd5b50356001600160a01b03166106c0565b6101196004803603602081101561023b57600080fd5b50356001600160a01b0316610788565b6000546001600160a01b031681565b3360009081526002602052604090205460ff166102a85760405162461bcd60e51b8152600401808060200182810382526021815260200180610dd86021913960400191505060405180910390fd5b6102bd6001600160a01b038416333085610881565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d602081101561035557600080fd5b505110156103945760405162461bcd60e51b8152600401808060200182810382526029815260200180610d2f6029913960400191505060405180910390fd5b6103c86001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338361090f565b505050565b60026020526000908152604090205460ff1681565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610545836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d602081101561047d57600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216600a0a9161053f916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163313ce56791600480820192602092909190829003018186803b15801561050657600080fd5b505afa15801561051a573d6000803e3d6000fd5b505050506040513d602081101561053057600080fd5b5051859060ff16600a0a61098f565b906109f1565b9392505050565b6000546001600160a01b031633146105955760405162461bcd60e51b8152600401808060200182810382526024815260200180610df96024913960400191505060405180910390fd5b6105a96001600160a01b038416838361090f565b604080516001600160a01b0380861682528416602082015280820183905290517f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9181900360600190a1505050565b6000546001600160a01b031633146106415760405162461bcd60e51b8152600401808060200182810382526024815260200180610df96024913960400191505060405180910390fd5b6001600160a01b0381166106865760405162461bcd60e51b8152600401808060200182810382526031815260200180610d866031913960400191505060405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107095760405162461bcd60e51b8152600401808060200182810382526024815260200180610df96024913960400191505060405180910390fd5b6001600160a01b03811661074e5760405162461bcd60e51b815260040180806020018281038252602e815260200180610d58602e913960400191505060405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b03163314806107a95750336001600160a01b038216145b6107fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff91821615179182905583519485521615159083015280517f661abc66f13f27ca765c6a753171d10aa4861f03f1b506c5b1297a2dc80cf8ee9281900390910190a150565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610909908590610a33565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526103c8908490610a33565b60008261099e575060006109eb565b828202828482816109ab57fe5b04146109e85760405162461bcd60e51b8152600401808060200182810382526021815260200180610db76021913960400191505060405180910390fd5b90505b92915050565b600061054583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610ae4565b6060610a88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b869092919063ffffffff16565b8051909150156103c857808060200190516020811015610aa757600080fd5b50516103c85760405162461bcd60e51b815260040180806020018281038252602a815260200180610e1d602a913960400191505060405180910390fd5b60008183610b705760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b35578181015183820152602001610b1d565b50505050905090810190601f168015610b625780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610b7c57fe5b0495945050505050565b6060610b958484600085610b9d565b949350505050565b6060610ba885610d28565b610bf9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610c5657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610c19565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610cb8576040519150601f19603f3d011682016040523d82523d6000602084013e610cbd565b606091505b50915091508115610cd1579150610b959050565b805115610ce15780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315610b35578181015183820152602001610b1d565b3b15159056fe6465706f7369743a20496e73756666696369656e74207061796f7574546f6b656e2062616c616e6365426f6e644f776e61626c653a206e65774f776e6572206d757374206e6f74206265207a65726f2061646472657373426f6e644f776e61626c653a205f6e65774d616e61676572206d757374206e6f74206265207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f74206120626f6e6420636f6e7472616374426f6e644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220f09aea873c32f6ecb35e002420dad51795a9b07831fa2d092d0d4e2d712b068564736f6c63430007050033437573746f6d54726561737572793a20696e697469616c4f776e6572206d757374206e6f74206265207a65726f2061646472657373437573746f6d54726561737572793a207061796f7574546f6b656e206d757374206e6f74206265207a65726f2061646472657373426f6e644f776e61626c653a206e65774f776e6572206d757374206e6f74206265207a65726f2061646472657373426f6e644f776e61626c653a205f6e65774d616e61676572206d757374206e6f74206265207a65726f2061646472657373426f6e644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572637265617465426f6e64416e6454726561737572793a2066656573206d757374206265207365747570a2646970667358221220709f4234a72286eb8eeb7bb8faec8cdadc2f421cf04bb3ab2a722c748663f8dd64736f6c63430007050033466163746f72793a2073756273696479526f75746572206261642061646472657373466163746f72793a20666163746f727953746f72616765206261642061646472657373",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBond(address,address,address,address)": {
        "params": {
          "_customTreasury": "address",
          "_initialOwner": "address",
          "_payoutToken": "address",
          "_principleToken": "address"
        },
        "returns": {
          "_bond": "address",
          "_treasury": "address"
        }
      },
      "createBondAndTreasury(address,address,address)": {
        "params": {
          "_initialOwner": "address",
          "_payoutToken": "address",
          "_principleToken": "address"
        },
        "returns": {
          "_bond": "address",
          "_treasury": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBond(address,address,address,address)": {
        "notice": "deploys custom treasury and custom bond contracts and returns address of both"
      },
      "createBondAndTreasury(address,address,address)": {
        "notice": "deploys custom treasury and custom bond contracts and returns address of both"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5578,
        "contract": "src/bonding/Factory.sol:Factory",
        "label": "policy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5580,
        "contract": "src/bonding/Factory.sol:Factory",
        "label": "bondManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}