{
  "address": "0x6eeAEff2A5393F09B9D11b7d6489A3282a9AD28d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswap2Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswap2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiswapFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_payoutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "__swapETHToToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSushiFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSushiRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_swapArgs",
          "type": "bytes"
        }
      ],
      "name": "swapForDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpAmount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaa42a866349f8afd86a270d5e3859676eef358849ab5a6a4af770c2f27f5b8bc",
  "receipt": {
    "to": null,
    "from": "0xb10bcC8B508174c761CFB1E7143bFE37c4fBC3a1",
    "contractAddress": "0x6eeAEff2A5393F09B9D11b7d6489A3282a9AD28d",
    "transactionIndex": 29,
    "gasUsed": "1657351",
    "logsBloom": "0x
    "blockHash": "0xc54c7afb88de49135b68618447b1ac2882b88ac957f6e2af8ab0ed2afd8546d4",
    "transactionHash": "0xaa42a866349f8afd86a270d5e3859676eef358849ab5a6a4af770c2f27f5b8bc",
    "logs": [],
    "blockNumber": 9894457,
    "cumulativeGasUsed": "7926338",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
  ],
  "solcInputHash": "7abecc991158ab403c5243682d97805e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswap2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"__swapETHToToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSushiFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_swapArgs\",\"type\":\"bytes\"}],\"name\":\"swapForDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapForDeposit(bytes)\":{\"params\":{\"_swapArgs\":\"encoded data\"},\"returns\":{\"lpAddress_\":\"lp token address\",\"lpAmount_\":\"lp token amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__swapETHToToken(uint256,uint256,address,address[])\":{\"notice\":\"Swap ETH to ERC20 Token\"},\"getSushiFactory()\":{\"notice\":\"Gets the `SUSHI_FACTORY` variable\"},\"getSushiRouter()\":{\"notice\":\"Gets the `SUSHI_ROUTER` variable\"},\"getUniswapFactory()\":{\"notice\":\"Gets the `UNISWAP2_FACTORY` variable\"},\"getUniswapRouter()\":{\"notice\":\"Gets the `UNISWAP2_ROUTER` variable\"},\"swapForDeposit(bytes)\":{\"notice\":\"get LP token and LP amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bonding/Helper.sol\":\"Helper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/bonding/Helper.sol\":{\"content\":\"\\n\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router2.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/IHelper.sol\\\";\\n\\ncontract Helper is IHelper {\\n    \\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    \\n    address private immutable UNISWAP2_FACTORY;\\n    address private immutable UNISWAP2_ROUTER;\\n    address private immutable SUSHI_FACTORY;\\n    address private immutable SUSHI_ROUTER;\\n    address private immutable WETH;\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /// @dev Provides a standard implementation for transferring assets between\\n    /// the msg.sender and the helper, by wrapping the action.\\n    modifier transferHandler(bytes memory _encodedArgs) {            \\n        (\\n            uint256 depositAmount,\\n            address depositAsset,\\n            address payoutAsset,\\n            address incomingAsset\\n        ) = __decodeSwapArgs(_encodedArgs);\\n        \\n        if(depositAsset != address(0)) {\\n            IERC20(depositAsset).safeTransferFrom(msg.sender, address(this), depositAmount);\\n        }\\n\\n        // Execute call\\n        _;\\n\\n        // remain asset to send caller back\\n        __transferAssetToCaller(msg.sender, depositAsset);\\n        __transferAssetToCaller(msg.sender, payoutAsset);\\n    }\\n    \\n    receive() external payable {}\\n\\n    constructor(\\n        address _uniswap2Factory,\\n        address _uniswap2Router,\\n        address _sushiswapFactory,\\n        address _sushiswapRouter\\n    ) {\\n        require(_uniswap2Factory != address(0), \\\"Helper: _uniswap2Factory must not be zero address\\\");\\n        require(_uniswap2Router != address(0), \\\"Helper: _uniswap2Router must not be zero address\\\");\\n        require(_sushiswapFactory != address(0), \\\"Helper: _sushiswapFactory must not be zero address\\\");\\n        require(_sushiswapRouter != address(0), \\\"Helper: _sushiswapRouter must not be zero address\\\");\\n\\n        UNISWAP2_FACTORY = _uniswap2Factory;\\n        UNISWAP2_ROUTER = _uniswap2Router;\\n        SUSHI_FACTORY = _sushiswapFactory;    \\n        SUSHI_ROUTER = _sushiswapRouter;  \\n        WETH = IUniswapV2Router2(_uniswap2Router).WETH();\\n    }\\n\\n    /// @notice get LP token and LP amount\\n    /// @param _swapArgs encoded data\\n    /// @return lpAddress_ lp token address\\n    /// @return lpAmount_ lp token amount\\n    function swapForDeposit(bytes calldata _swapArgs)\\n        external        \\n        override        \\n        transferHandler(_swapArgs)\\n        returns (address lpAddress_, uint256 lpAmount_)\\n    {\\n        (lpAddress_, lpAmount_) = __swapForDeposit(_swapArgs);\\n    }\\n\\n    /// Avoids stack-too-deep error.\\n    function __swapForDeposit(bytes calldata _swapArgs) private \\n        returns (address lpAddress_, uint256 lpAmount_)\\n    {\\n        (\\n            uint256 depositAmount,\\n            address depositAsset,\\n            address payoutAsset,\\n            address incomingAsset\\n        ) = __decodeSwapArgs(_swapArgs);\\n\\n        address router;\\n        address factory;\\n        uint256 payoutAmount = depositAmount;     \\n        address[] memory path = new address[](2);  \\n\\n        if(depositAsset != payoutAsset) {             \\n            path[0] = depositAsset;            \\n            if(path[0] == address(0)) {\\n                path[0] = WETH;\\n            }\\n            path[1] = payoutAsset;\\n\\n            (router,) = __checkPool(path);\\n            \\n            require(router != address(0), \\\"Swap: No Pool\\\");\\n\\n            // Get payoutAmount from depositAsset on Uniswap/Sushiswap\\n            payoutAmount = IUniswapV2Router2(router).getAmountsOut(depositAmount, path)[1];\\n            \\n            if(path[0] == WETH) {\\n                __swapETHToToken(depositAmount, payoutAmount, router, path);\\n            } else {\\n                __swapTokenToToken(depositAmount, payoutAmount, router, path);\\n            }\\n        }   \\n        \\n        path[0] = payoutAsset;\\n        path[1] = incomingAsset;\\n\\n        (router, factory) = __checkPool(path);\\n        \\n        require(router != address(0), \\\"Swap: No Pool\\\");\\n\\n        uint256 expectedAmount = IUniswapV2Router2(router).getAmountsOut(payoutAmount.div(2), path)[1];\\n\\n        __swapTokenToToken(payoutAmount.div(2), expectedAmount, router, path);\\n        \\n        (lpAddress_, lpAmount_) = addLiquidityToken(\\n            factory,\\n            router,\\n            path,\\n            payoutAmount,\\n            expectedAmount\\n        );              \\n    }\\n\\n    /// @notice Swap ERC20 Token to ERC20 Token\\n    function __swapTokenToToken(\\n        uint256 _payoutAmount,\\n        uint256 _expectedAmount,\\n        address _router,\\n        address[] memory _path\\n    ) private returns (uint256[] memory amounts_) {\\n        __approveMaxAsNeeded(_path[0], _router, _payoutAmount);\\n        \\n        amounts_ = IUniswapV2Router2(_router).swapExactTokensForTokens(\\n            _payoutAmount,\\n            _expectedAmount,\\n            _path,\\n            address(this),\\n            block.timestamp.add(1)\\n        );\\n    }\\n\\n    /// @notice Swap ETH to ERC20 Token\\n    function __swapETHToToken(\\n        uint256 _payoutAmount,\\n        uint256 _expectedAmount,\\n        address _router,\\n        address[] memory _path\\n    ) public payable returns (uint256[] memory amounts_) {\\n        __approveMaxAsNeeded(_path[0], _router, _payoutAmount);\\n\\n        amounts_ = IUniswapV2Router2(_router).swapExactETHForTokens{value: address(this).balance}(\\n            _expectedAmount,\\n            _path,\\n            address(this),\\n            block.timestamp.add(1)\\n        );\\n    }\\n\\n    /// @notice get LP token on uniswap/sushiswap\\n    /// @param _factory factory address of uni/sushi\\n    /// @param _router router address of uni/sushi\\n    /// @param _path address[]\\n    /// @param _amountADesired tokenA amount\\n    /// @param _amountBDesired tokenB amount\\n    /// @return lpAddress_ lp token address\\n    /// @return lpAmount_ lp token amount\\n    function addLiquidityToken(\\n        address _factory,\\n        address _router,\\n        address[] memory _path,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired        \\n    )\\n        private  \\n        returns (address lpAddress_, uint256 lpAmount_)\\n    {\\n        lpAmount_ = __addTokenAndToken(\\n            _router,\\n            _path,\\n            _amountADesired,\\n            _amountBDesired\\n        );                \\n\\n        lpAddress_ = IUniswapV2Factory(_factory).getPair(_path[0], _path[1]);\\n\\n        __transferAssetToCaller(msg.sender, lpAddress_);        \\n    }\\n\\n    /// @notice addLiquidity for lp tokens on Uniswap/Sushi\\n    function __addTokenAndToken(\\n        address _router,\\n        address[] memory _path,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired\\n    ) private returns (uint256 lpAmount_) {\\n        __approveMaxAsNeeded(_path[0], _router, _amountADesired);\\n        __approveMaxAsNeeded(_path[1], _router, _amountBDesired);\\n        \\n        // Get expected output amount on Uniswap/Sushi\\n        address[] memory path = new address[](2);\\n        path[0] = _path[1];\\n        path[1] = _path[0];\\n        uint256 amountAMax = IUniswapV2Router2(_router).getAmountsOut(_amountBDesired, path)[1];\\n        \\n        // Execute addLiquicity on Uniswap/Sushi\\n        (, , lpAmount_) = IUniswapV2Router2(_router).addLiquidity(\\n            _path[0],\\n            _path[1],\\n            amountAMax,\\n            _amountBDesired,\\n            1,\\n            1,\\n            msg.sender,\\n            block.timestamp.add(1)\\n        );\\n    }\\n\\n    /// @dev Helper to decode swap encoded call arguments\\n    function __decodeSwapArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            uint256 depositAmount_,\\n            address depositAsset_,\\n            address payoutAsset_,\\n            address incomingAsset_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256, address, address, address));\\n    }\\n\\n    /// @dev Helper for asset to approve their max amount of an asset.\\n    function __approveMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) private {\\n        if (IERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            IERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the caller\\n    function __transferAssetToCaller(address payable _target, address _asset) private {\\n        uint256 transferAmount;\\n        if(_asset == address(ETH_ADDRESS) || _asset == address(0)) {\\n            transferAmount = address(this).balance;\\n            if (transferAmount > 0) {\\n                _target.transfer(transferAmount);\\n            }\\n        } else {\\n            transferAmount = IERC20(_asset).balanceOf(address(this));\\n            if (transferAmount > 0) {\\n                IERC20(_asset).safeTransfer(_target, transferAmount);\\n            }\\n        }        \\n    }\\n\\n    /// @dev check if special pool exist on uniswap or sushiswap\\n    function __checkPool(address[] memory _path) private view returns (address router_, address factory_) {        \\n        address uniPool = IUniswapV2Factory(UNISWAP2_FACTORY).getPair(_path[0], _path[1]);   \\n        address sushiPool = IUniswapV2Factory(SUSHI_FACTORY).getPair(_path[0], _path[1]);\\n        \\n        if(uniPool == address(0) && sushiPool != address(0)) {\\n            return (SUSHI_ROUTER, SUSHI_FACTORY);\\n        } else if(uniPool != address(0) && sushiPool == address(0)) {\\n            return (UNISWAP2_ROUTER, UNISWAP2_FACTORY);\\n        } else if(uniPool != address(0) && sushiPool != address(0)) {\\n            return (UNISWAP2_ROUTER, UNISWAP2_FACTORY);\\n        } else if(uniPool == address(0) && sushiPool == address(0)) {\\n            return (address(0), address(0));\\n        }\\n    }\\n\\n    /// @notice Gets the `UNISWAP2_FACTORY` variable\\n    function getUniswapFactory() external view returns (address factory_) {\\n        return UNISWAP2_FACTORY;\\n    }\\n\\n    /// @notice Gets the `SUSHI_FACTORY` variable\\n    function getSushiFactory() external view returns (address factory_) {\\n        return SUSHI_FACTORY;\\n    }\\n\\n    /// @notice Gets the `UNISWAP2_ROUTER` variable\\n    function getUniswapRouter() external view returns (address router_) {\\n        return UNISWAP2_ROUTER;\\n    }\\n\\n    /// @notice Gets the `SUSHI_ROUTER` variable\\n    function getSushiRouter() external view returns (address router_) {\\n        return SUSHI_ROUTER;\\n    }\\n}\\n\",\"keccak256\":\"0xb760f91b02ebb4460ef103646da2bc5011a618a046971d6fdb386d39eb642ee2\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xffff7ea2181d88112fddeb2f098b011d90424fe057bd050a5b5b591d95650db4\",\"license\":\"GPL-3.0\"},\"src/interfaces/IHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @notice Interface for Helper\\ninterface IHelper {\\n\\n    function swapForDeposit(\\n        bytes calldata _swapArgs\\n    ) external returns (address lpAddress_, uint256 lpAmount_);\\n\\n}\\n\",\"keccak256\":\"0xd73bf2571ca659c4292f3a73c7b6867f8d230321cdc2a725df5f1a7ffb35ee59\",\"license\":\"GPL-3.0\"},\"src/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n\\npragma solidity 0.7.5;\\n\\n/// @title IUniswapV2Factory Interface\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x72520f6ab738a67b88758bd0832fb81f50cf3afc2d0a23d6ce2afe251c2af309\",\"license\":\"GPL-3.0\"},\"src/interfaces/IUniswapV2Router2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\n/// @title UniswapV2Router2 Interface\\ninterface IUniswapV2Router2 {\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    ) external returns (uint256, uint256);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    \\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x81fcad3919956f83b61b74f52973cc0ae43376aa5f8838ce5715804cc609271a\",\"license\":\"GPL-3.0\"},\"src/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory _hex = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = \\\"0\\\";\\n        _addr[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            _addr[2 + i * 2] = _hex[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3 + i * 2] = _hex[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n    }\\n}\\n\",\"keccak256\":\"0x0269cbe46fd8c8ddff0491844d59388d63481537b9708d84016f053bbabf7620\",\"license\":\"GPL-3.0\"},\"src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7e973b7df6348ae8dc725c39d735946a2f200dd8077295a583156c56c159542\",\"license\":\"GPL-3.0\"},\"src/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d4a7d568edc5f572551495050789eb8e6d766a737cf3eaffee4508426da2518\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100695760003560e01c806372667cdb1161004357806372667cdb146100d0578063af82ddce146100e5578063c20fd7a2146101f457610070565b80631b66bce2146100755780633e6dfa36146100a6578063524900b5146100bb57610070565b3661007057005b600080fd5b34801561008157600080fd5b5061008a610294565b604080516001600160a01b039092168252519081900360200190f35b3480156100b257600080fd5b5061008a6102b8565b3480156100c757600080fd5b5061008a6102dc565b3480156100dc57600080fd5b5061008a610300565b6101a4600480360360808110156100fb57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561013257600080fd5b82018360208201111561014457600080fd5b8035906020019184602083028401116401000000008311171561016657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610324945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101e05781810151838201526020016101c8565b505050509050019250505060405180910390f35b34801561020057600080fd5b506102716004803603602081101561021757600080fd5b81019060208101813564010000000081111561023257600080fd5b82018360208201111561024457600080fd5b8035906020019184600183028401116401000000008311171561026657600080fd5b5090925090506104c8565b604080516001600160a01b03909316835260208301919091528051918290030190f35b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60606103458260008151811061033657fe5b6020026020010151848761056c565b6001600160a01b038316637ff36ab547868530610363426001610640565b6040518663ffffffff1660e01b81526004018085815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156103cd5781810151838201526020016103b5565b50505050905001955050505050506000604051808303818588803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052602081101561043257600080fd5b810190808051604051939291908464010000000082111561045257600080fd5b90830190602082018581111561046757600080fd5b825186602082028301116401000000008211171561048457600080fd5b82525081516020918201928201910280838360005b838110156104b1578181015183820152602001610499565b505050509050016040525050509050949350505050565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092508291508190508061050f856106a1565b929650909450925090506001600160a01b0383161561053d5761053d6001600160a01b0384163330876106de565b610547898961076c565b90975095506105563384610dad565b6105603383610dad565b50505050509250929050565b604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529151839286169163dd62ed3e916044808301926020929190829003018186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d60208110156105ff57600080fd5b5051101561063b5761063b6001600160a01b038416837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610ed2565b505050565b60008282018381101561069a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806000808480602001905160808110156106bc57600080fd5b5080516020820151604083015160609093015191989097509195509350915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610766908590611028565b50505050565b6000806000806000806107b488888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106a192505050565b60408051600280825260608083018452969a50949850929650909450600093849389939192602083019080368337019050509050856001600160a01b0316876001600160a01b031614610b3257868160008151811061080f57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006001600160a01b03168160008151811061084757fe5b60200260200101516001600160a01b031614156108ad577f00000000000000000000000000000000000000000000000000000000000000008160008151811061088c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b85816001815181106108bb57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506108e4816110d9565b5093506001600160a01b038416610942576040805162461bcd60e51b815260206004820152600d60248201527f537761703a204e6f20506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fd06ca61f000000000000000000000000000000000000000000000000000000008152600481018a8152602482019283528351604483015283516001600160a01b0388169363d06ca61f938d938793909291606401906020808601910280838360005b838110156109c15781810151838201526020016109a9565b50505050905001935050505060006040518083038186803b1580156109e557600080fd5b505afa1580156109f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610a2257600080fd5b8101908080516040519392919084640100000000821115610a4257600080fd5b908301906020820185811115610a5757600080fd5b8251866020820283011164010000000082111715610a7457600080fd5b82525081516020918201928201910280838360005b83811015610aa1578181015183820152602001610a89565b50505050905001604052505050600181518110610aba57fe5b602002602001015191507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681600081518110610afb57fe5b60200260200101516001600160a01b03161415610b2457610b1e88838684610324565b50610b32565b610b3088838684611418565b505b8581600081518110610b4057fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610b6e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050610b97816110d9565b90945092506001600160a01b038416610bf7576040805162461bcd60e51b815260206004820152600d60248201527f537761703a204e6f20506f6f6c00000000000000000000000000000000000000604482015290519081900360640190fd5b60006001600160a01b03851663d06ca61f610c1385600261151e565b846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610c69578181015183820152602001610c51565b50505050905001935050505060006040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cca57600080fd5b8101908080516040519392919084640100000000821115610cea57600080fd5b908301906020820185811115610cff57600080fd5b8251866020820283011164010000000082111715610d1c57600080fd5b82525081516020918201928201910280838360005b83811015610d49578181015183820152602001610d31565b50505050905001604052505050600181518110610d6257fe5b60200260200101519050610d8b610d8360028561151e90919063ffffffff16565b828785611418565b50610d998486848685611560565b909e909d509b505050505050505050505050565b60006001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610de157506001600160a01b038216155b15610e2b5750478015610e26576040516001600160a01b0384169082156108fc029083906000818181858888f19350505050158015610e24573d6000803e3d6000fd5b505b61063b565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d6020811015610eb457600080fd5b50519050801561063b5761063b6001600160a01b0383168483611639565b801580610f715750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d6020811015610f6d57600080fd5b5051155b610fac5760405162461bcd60e51b8152600401808060200182810382526036815260200180611c6e6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261063b9084905b606061107d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116b99092919063ffffffff16565b80519091501561063b5780806020019051602081101561109c57600080fd5b505161063b5760405162461bcd60e51b815260040180806020018281038252602a815260200180611c44602a913960400191505060405180910390fd5b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058560008151811061111a57fe5b60200260200101518660018151811061112f57fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561118457600080fd5b505afa158015611198573d6000803e3d6000fd5b505050506040513d60208110156111ae57600080fd5b505184519091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590879084906111f357fe5b60200260200101518760018151811061120857fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561125d57600080fd5b505afa158015611271573d6000803e3d6000fd5b505050506040513d602081101561128757600080fd5b505190506001600160a01b0382161580156112aa57506001600160a01b03811615155b156112fc577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000935093505050611413565b6001600160a01b0382161580159061131b57506001600160a01b038116155b1561136d577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000935093505050611413565b6001600160a01b0382161580159061138d57506001600160a01b03811615155b156113df577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000935093505050611413565b6001600160a01b0382161580156113fd57506001600160a01b038116155b1561141057600080935093505050611413565b50505b915091565b606061142a8260008151811061033657fe5b6001600160a01b0383166338ed173986868530611448426001610640565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156114b85781810151838201526020016114a0565b505050509050019650505050505050600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561043257600080fd5b600061069a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506116d0565b60008061156f86868686611772565b9050866001600160a01b031663e6a439058660008151811061158d57fe5b6020026020010151876001815181106115a257fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156115f757600080fd5b505afa15801561160b573d6000803e3d6000fd5b505050506040513d602081101561162157600080fd5b5051915061162f3383610dad565b9550959350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261063b908490611028565b60606116c88484600085611ad0565b949350505050565b6000818361175c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611721578181015183820152602001611709565b50505050905090810190601f16801561174e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161176857fe5b0495945050505050565b60006117938460008151811061178457fe5b6020026020010151868561056c565b6117b2846001815181106117a357fe5b6020026020010151868461056c565b6040805160028082526060808301845292602083019080368337019050509050846001815181106117df57fe5b6020026020010151816000815181106117f457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508460008151811061182157fe5b60200260200101518160018151811061183657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000866001600160a01b031663d06ca61f85846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156118be5781810151838201526020016118a6565b50505050905001935050505060006040518083038186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561191f57600080fd5b810190808051604051939291908464010000000082111561193f57600080fd5b90830190602082018581111561195457600080fd5b825186602082028301116401000000008211171561197157600080fd5b82525081516020918201928201910280838360005b8381101561199e578181015183820152602001611986565b505050509050016040525050506001815181106119b757fe5b60200260200101519050866001600160a01b031663e8e33700876000815181106119dd57fe5b6020026020010151886001815181106119f257fe5b6020026020010151848860018033611a1460014261064090919063ffffffff16565b6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200182815260200198505050505050505050606060405180830381600087803b158015611a9657600080fd5b505af1158015611aaa573d6000803e3d6000fd5b505050506040513d6060811015611ac057600080fd5b5060400151979650505050505050565b6060611adb85611c3d565b611b2c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611b6b5780518252601f199092019160209182019101611b4c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611bcd576040519150601f19603f3d011682016040523d82523d6000602084013e611bd2565b606091505b50915091508115611be65791506116c89050565b805115611bf65780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611721578181015183820152602001611709565b3b15159056fe5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212208f61f05095eb11ba006f2edd381ffbd7f36970430425d9d8fe7597e52930084664736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapForDeposit(bytes)": {
        "params": {
          "_swapArgs": "encoded data"
        },
        "returns": {
          "lpAddress_": "lp token address",
          "lpAmount_": "lp token amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__swapETHToToken(uint256,uint256,address,address[])": {
        "notice": "Swap ETH to ERC20 Token"
      },
      "getSushiFactory()": {
        "notice": "Gets the `SUSHI_FACTORY` variable"
      },
      "getSushiRouter()": {
        "notice": "Gets the `SUSHI_ROUTER` variable"
      },
      "getUniswapFactory()": {
        "notice": "Gets the `UNISWAP2_FACTORY` variable"
      },
      "getUniswapRouter()": {
        "notice": "Gets the `UNISWAP2_ROUTER` variable"
      },
      "swapForDeposit(bytes)": {
        "notice": "get LP token and LP amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}